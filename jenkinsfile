pipeline {
    agent any

    environment {
        COMPOSE_PROJECT_NAME = "employee"
        ANSIBLE_CONFIG = "${WORKSPACE}/ansible.cfg"
    }

    stages {
        stage('Checkout from GitHub') {
            steps {
                checkout scm
            }
        }

        stage('Setup Environment') {
            steps {
                sh '''
                echo "[defaults]" > ansible.cfg
                echo "host_key_checking = False" >> ansible.cfg
                echo "remote_user = vagrant" >> ansible.cfg
                echo "private_key_file = /var/lib/jenkins/.ssh/id_rsa" >> ansible.cfg
                '''
            }
        }

        stage('Build & Start with Docker Compose') {
            steps {
                sh '''
                docker compose down --remove-orphans
                docker compose build
                docker compose up -d
                '''
            }
        }

        stage('Run Migrations') {
            steps {
                sh '''
                docker compose run --rm web_services python manage.py migrate --noinput
                '''
            }
        }

        stage('Push to DockerHub') {
            steps {
                withDockerRegistry([credentialsId: 'dockerhub-credentials', url: '']) {
                    // push the web_services image that was built
                    sh '''
                    IMAGE_NAME=thapavishal/employee
                    docker tag ${COMPOSE_PROJECT_NAME}_web_services:latest $IMAGE_NAME:$BUILD_NUMBER
                    docker push $IMAGE_NAME:$BUILD_NUMBER
                    '''
                }
            }
        }

        stage('Deploy to Development') {
            steps {
                sshagent(credentials: ['vagrant-ssh-key']) {
                    sh '''
                    ansible-playbook -i ansible/inventory/dev.ini ansible/playbooks/deploy.yaml \
                    --extra-vars "env=dev image_tag=thapavishal/employee:$BUILD_NUMBER"
                    '''
                    }
                }
            }


        // stage('Deploy to Development') {
        //     steps {
        //         sshagent(credentials: ['vagrant-ssh-key']) {
        //             sh '''
        //             ansible-playbook -i inventory deploy.yaml \
        //               --extra-vars "env=dev image_tag=thapavishal/elearning:$BUILD_NUMBER"
        //             '''
        //         }
        //     }
        // }

        stage('Deploy to Production') {
            steps {
                timeout(time: 1, unit: 'DAYS') {
                    input message: 'Approve production deployment?'
                }
                sshagent(credentials: ['vagrant-ssh-key']) {
                    sh '''
                    ansible-playbook -i ansible/inventory/prod.ini ansible/playbooks/deploy.yaml \
                    // ansible-playbook -i inventory deploy.yaml \
                      --extra-vars "env=prod image_tag=thapavishal/employee:$BUILD_NUMBER"
                    '''
                }
            }
        }
    }

    post {
        always {
            mail to: 'v01.thapa@gmail.com',
                subject: "Job '${JOB_NAME}' (${BUILD_NUMBER}) status",
                body: "Go to ${BUILD_URL} and verify the build"
        }
        success {
            mail body: """Hi Team,
            Build #$BUILD_NUMBER succeeded. Visit:
            $BUILD_URL
            Regards,
            DevOps Team""",
            subject: 'BUILD SUCCESS NOTIFICATION',
            to: 'v01.thapa@gmail.com'
        }
        failure {
            mail body: """Hi Team,
            Build #$BUILD_NUMBER failed. Visit:
            $BUILD_URL
            Regards,
            DevOps Team""",
            subject: 'BUILD FAILED NOTIFICATION',
            to: 'v01.thapa@gmail.com'
        }
    }
}

// updated jenkinsfile 